# Default Docker DNS
resolver 127.0.0.11;

# When an XDEBUG (session, profiler, trace) cookie is present, use php-dev container with Xdebug loaded.
map $http_cookie $domainService {
  default php;
  "~*XDEBUG_" php-dev;
}

server {
  open_file_cache off;

  listen 80 default_server;
  listen [::]:80 default_server;
  resolver_timeout 5s;
  keepalive_timeout 241;
  server_name _;

  root /var/www/php/public;

  error_log /var/log/nginx/error.log;
  access_log /var/log/nginx/access.log;
  error_page 404 = @rewrite;

  index index.php index.html;
  client_max_body_size 128M;

  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }

  location ~ \..*/.*\.php$ {
    return 403;
  }

  location ~ (^|/)\. {
    return 403;
  }

  location ~ /vendor/.*\.php$ {
    deny all;
    return 404;
  }

  location ~* \.(engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\.php)?|xtmpl)$|^(\..*|Entries.*|Repository|Root|Tag|Template)$|\.php_ {
    deny all;
  }

  location ~* ^/.well-known/ {
    allow all;
  }

  location / {
    try_files $uri /index.php?$query_string;
  }

  location @rewrite {
    rewrite ^/(.*)$ /index.php?q=$1;
  }

  location ~* \.php$ {
    fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
    proxy_intercept_errors on;
    include fastcgi_params;
    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;
    fastcgi_index index.php;
    fastcgi_intercept_errors off;
    fastcgi_param HTTP_PROXY "";
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    fastcgi_param QUERY_STRING $query_string;
    fastcgi_pass $domainService:9000;
    fastcgi_read_timeout 241;

    if ($http_origin ~* (http?://localhost(:[0-9]+)?$)) {
        set $cors "true";
    }
    if ($request_method = "OPTIONS") {
        set $cors "${cors}_${request_method}";
    }
    if ($http_access_control_request_method) {
        set $cors "${cors}_preflight";
    }
    if ($cors  ~ "(true_preflight|true_OPTIONS_preflight)" ) {
        add_header 'Access-Control-Allow-Origin' "$http_origin";
        add_header 'Access-Control-Allow-Methods' 'GET,PUT,POST,OPTIONS,DELETE,PATCH';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Origin,Accept,Authorization';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
    }
    if ($cors  ~ "(true_OPTIONS|true)") {
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Origin,Accept,Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Expose-Headers' 'Access-Control-Allow-Methods' always;
    }
  }

  location ~* \.(css|js|jpg|jpeg|gif|png|ico|svg|woff|woff2)(\?.*)?$ {
    if (-f $request_filename) {
      expires 30d;
      add_header Cache-Control public;
      break;
    }
    try_files $uri @rewrite;
  }

}